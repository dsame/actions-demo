#! /usr/bin/env node

const unzipper = require('unzipper');
const url = require('url');
const HttpsProxyAgent = require('https-proxy-agent');
const https = require('https');
const path = require('path');
const fs = require('fs');
const rimraf = require('rimraf');
const ProgressBar = require('progress');
const os = require('os');
const exec = require('child_process').exec;
const compareVersions = require('compare-versions');
const chalkSupported = compareVersions(process.version, '10.0') >= 0;

function printError(message) {
    if(chalkSupported){
        const redChalk = require('chalk').red;
        console.error(redChalk(message));
    }
    else {
        console.error(message);
    }
}

function getPath() {
    const bin = path.resolve(path.join(path.dirname(__filename), '..', 'bin'));
    if (fs.existsSync(bin)) {
        rimraf.sync(bin);
    }

    return bin
}

function detectDotnetCore() {
    return new Promise((resolve) => {
        let dotnetVersion = "3.x";
        console.log('Checking .NET Core environment ...');
        let versionCp = exec(`dotnet --version`, (error, stdout, stderr) => {
            try {
                if (!!stdout) {
                    let reg = new RegExp("[a-zA-Z0-9.]+");
                    let match = stdout.match(reg);
                    if (match) {
                        dotnetVersion = match[0];
                        if (compareVersions(dotnetVersion, '2.1.0') < 0) {
                            throw Error('.NET Core version below 2.1.0, please update to latest .NET Core version from https://dotnet.microsoft.com/download');
                        } else {
                            console.log('.NET Core environment is ready.');
                        }
                    } else {
                        console.log(stdout);
                        throw Error('.NET Core version not found, please install .NET Core SDK with version 3.x from https://dotnet.microsoft.com/download');
                    }
                }

                if (!!stderr) {
                    console.log('Please install .NET Core SDK with version 3.x from from https://dotnet.microsoft.com/download');
                    throw Error(stderr);
                }
            }
            catch (err) {
                printError('Error details:' + err.message);
                dotnetVersion = "3.x";
            }
        })
        .once('error', err => {
            printError('Error details:' + err.message);
            dotnetVersion = "3.x";
        })
        .once('close', () => {
            resolve(dotnetVersion);
        });
    });
}

function downloadZip(dotnetVersion){
    fs.readFile(path.resolve(path.join(path.dirname(__filename), '..', 'docs', 'downloadfilelist_settings.json')), (err, data) => {
        if (err) {
            printError(err.message);
        }
        else {
            const fileList = JSON.parse(data.toString());
            // default version is 3.x
            let endpoint = fileList[0].fileUrl;

            switch(dotnetVersion[0]){
                case '2':
                    endpoint = fileList[1].fileUrl;
                    break;
                case '3':
                default:
                    endpoint = fileList[0].fileUrl;
                    break;
            }

            console.log('Attempting to GET %j', endpoint);
            const options = url.parse(endpoint);
            // npm config preceed system environment
            // https://github.com/npm/npm/blob/19397ad523434656af3d3765e80e22d7e6305f48/lib/config/reg-client.js#L7-L8
            // https://github.com/request/request/blob/b12a6245d9acdb1e13c6486d427801e123fdafae/lib/getProxyFromURI.js#L66-L71
            const proxy = process.env.npm_config_https_proxy ||
                        process.env.npm_config_proxy ||
                        process.env.HTTPS_PROXY ||
                        process.env.https_proxy ||
                        process.env.HTTP_PROXY ||
                        process.env.http_proxy;

            if (proxy) {
                console.log('Using proxy server %j', proxy);
                options.agent = new HttpsProxyAgent(proxy);
            }

            https.get(options, response => {
                const bar = new ProgressBar('[:bar] Downloading Azure StreamAnalytics CICD', {
                    total: Number(response.headers['content-length']),
                    width: 18
                });

                if (response.statusCode === 200) {
                    const installPath = getPath();
                    response.on('data', data => bar.tick(data.length));
                    const unzipStream = unzipper.Extract({ path: installPath })
                        .on('close', () => {
                            if (os.platform() === 'linux' || os.platform() === 'darwin') {
                                fs.chmodSync(`${installPath}/LocalRunService.dll`, 0o755);
                            }
                        });
                    response.pipe(unzipStream);
                } else {
                    printError('Error downloading zip file from ' + endpoint);
                    printError('Expected: 200, Actual: ' + response.statusCode);
                    process.exit(1);
                }
            });
        }
    });
}

detectDotnetCore()
    .then(dotnetVersion => downloadZip(dotnetVersion));