# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: make changes
      run: |
        DOTNET_VERSIONS="2.1 3.1 5.0"
        sdks=''
        for version in ${DOTNET_VERSIONS}; do
          release_url="https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/${version}/releases.json"
          curl --output "${version}.json" "${release_url}"
          releases=$(cat "./${version}.json")
          s=()
          s=("${s[@]}" $(echo "${releases}" | jq '.releases[]' | jq '.sdk.version'))
          s=("${s[@]}" $(echo "${releases}" | jq '.releases[]' | jq '.sdks[]?' | jq '.version'))
          echo ${s[@]}
          #sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[]' | jq '.sdk.version'))
          #sdks=("${sdks[@]}" $(echo "${releases}" | jq '.releases[]' | jq '.sdks[]?' | jq '.version'))
        done
        
        #echo ${sdks[@]}
        #echo '======='
        #sortedSdks=$(echo ${sdks[@]} | tr ' ' '\n' | grep -v preview | grep -v rc | grep -v display |     cut -d\" -f2 | sort -u -r)
        #echo ${sortedSdks[@]}
