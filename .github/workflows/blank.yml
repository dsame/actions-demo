# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push]
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os: [ubuntu-20.04]
        #        os: [ubuntu-16.04, ubuntu-18.04, ubuntu-20.04]
    
    runs-on: ${{ matrix.os }}


    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: show repos before
      run: |
        grep apt.llvm.org /etc/apt/sources.list || echo "No llvv repo"

    - name: install llvm repos
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 12

    - name: show repos after
      run: |
        grep apt.llvm.org /etc/apt/sources.list

    - name: fix repo (since June 3)
      run: |
        sudo apt-get check

    - name: install aptitude
      run: |
        sudo apt-get install -y aptitude

    - name: attempt to install libc++-12
      run: |
        sudo aptitude install -y libc++-12-dev

    - name: show content of libx++-12-dev
      run: |
        dpkg -L libc++-12-dev

    - name: show default clang version
      run: |
        clang++ --version

    - name: switch clang version to 12
      run: |
        update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-12 100
        update-alternatives --install /usr/bin/clang clang /usr/bin/clang-12 100

    - name: show current clang version
      run: |
        clang++ --version
    
    - name: test constexpr
      run: |
        clang++ -std=c++14 -Werror -stdlib=libc++ test-14-constexpr.cpp && ./a.out
    
    - name: test auto-lambda
      run: |
        clang++ -std=c++14 -Werror -stdlib=libc++ test-14-auto-lambda.cpp && ./a.out
